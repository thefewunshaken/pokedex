{"version":3,"sources":["components/SearchBar/SearchBar.js","containers/Header/Header.js","components/Loading/Loading.js","components/Card/Card.js","components/CardList/CardList.js","containers/Scroll/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBar","_ref","searchChange","react_default","a","createElement","className","type","name","placeholder","onChange","Header","components_SearchBar_SearchBar","Loading","class","Card","picture","src","alt","concat","CardList","pokemon","map","robot","i","components_Card_Card","key","id","Scroll","props","style","overflowY","maxHeight","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","_this$state","searchResults","filter","toLowerCase","includes","length","containers_Header_Header","containers_Scroll_Scroll","components_CardList_CardList","checked","components_Loading_Loading","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cc67eda.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst SearchBar = ({ searchChange }) => {\r\n  return (\r\n    <div className= \"nes-field search-bar\">\r\n      <input\r\n        className=\"nes-input\"\r\n        type=\"search\"\r\n        name=\"search\"\r\n        placeholder='Search pokemon...'\r\n        onChange={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport './Header.css';\r\n\r\nconst Header = ({ searchChange }) => {\r\n\treturn (\r\n    <header>\r\n      <div>\r\n        <i className=\"nes-pokeball is-small\"></i>\r\n        <h1>Pokedex</h1>\r\n      </div>\r\n      <SearchBar searchChange={searchChange} />\r\n    </header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Loading.css';\r\n\r\nconst Loading = () => {\r\n\treturn (\r\n    <div className=\"loading\">\r\n      <h1 className=\"tc\">Loading...</h1>\r\n      <i class=\"nes-ash\"></i>\r\n      <i class=\"nes-pokeball\"></i>\r\n      <i class=\"nes-bulbasaur\"></i>\r\n      <i class=\"nes-charmander\"></i>\r\n      <i class=\"nes-squirtle\"></i>\r\n    </div>\r\n\t);\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ name, picture }) => {\r\n  return (\r\n    <div className=\"nes-container is-rounded card\">\r\n      <img\r\n        src={picture}\r\n        alt={`The Pokemon: ${name}`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = ({ pokemon }) => {\r\n\treturn (\r\n\t\t<div className=\"card-list\">\r\n\t\t\t{\r\n\t\t\t\tpokemon.map((robot, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={pokemon[i].id}\r\n\t\t\t\t\t\t\tid={pokemon[i].id}\r\n\t\t\t\t\t\t\tname={pokemon[i].name}\r\n\t\t\t\t\t\t\tpicture={pokemon[i].picture}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div className=\"scroll-container\" style={{overflowY: 'scroll', maxHeight: '750px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header/Header\";\nimport Loading from \"../components/Loading/Loading\";\nimport CardList from \"../components/CardList/CardList\";\nimport Scroll from \"./Scroll/Scroll\";\nimport './App.css';\n\n/**\n * TODO: Add pagination for search results exceeding 'x' number\n */\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemon: [],\n      searchfield: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://ironhack-pokeapi.herokuapp.com/pokemon\")\n      .then(response => response.json())\n      .then(pokemon => this.setState({ pokemon: pokemon }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value });\n  }\n\n  render() {\n    const { pokemon, searchfield } = this.state;\n    const searchResults = pokemon.filter(pokemon => \n      pokemon.name.toLowerCase().includes(searchfield.toLowerCase()));\n    \n    // show a loading screen until the data has been fetched and loaded into state\n    return !pokemon.length ? (\n      <Loading />\n    ) : (\n      <div className=\"app-container\">\n        <div className=\"flex-container\">\n          <Header searchChange={this.onSearchChange} />\n          <Scroll className=\"Scroll\">\n            <CardList pokemon={searchResults} />\n          </Scroll>\n          <footer className=\"nes-container is-rounded\">\n            <label>\n              <input type=\"radio\" class=\"nes-radio\" name=\"answer\" checked />\n              <span className=\"footer-text\">\n                {/* nested span is hacky fix for bad kerning */}\n                Ash Ketchum <span><span id=\"footer-kerning\">&copy; </span>1996</span>\n              </span>\n            </label>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}